apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfs-provisioner
  namespace: nfs
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-provisioner-runner
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
  - apiGroups: [""]
    resources: ["services", "endpoints"]
    verbs: ["get"]
  - apiGroups: ["extensions"]
    resources: ["podsecuritypolicies"]
    resourceNames: ["nfs-provisioner"]
    verbs: ["use"]
---
# NFS provisioner only needs to modify its own endpoints to update the leader in
# a clustered setup (i.e replicas > 1).
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-provisioner
  namespace: nfs
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: run-nfs-provisioner
subjects:
- kind: ServiceAccount
  name: nfs-provisioner
  namespace: nfs
roleRef:
  kind: ClusterRole
  name: nfs-provisioner-runner
  apiGroup: rbac.authorization.k8s.io
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: leader-locking-nfs-provisioner
  namespace: nfs
subjects:
  - kind: ServiceAccount
    name: nfs-provisioner
    # replace with namespace where provisioner is deployed
    namespace: nfs
roleRef:
  kind: Role
  name: leader-locking-nfs-provisioner
  apiGroup: rbac.authorization.k8s.io
---
# This deployment is a nfs client provisioner. It uses the DNS name/IP of an
# existing NFS server to bind PVCs to PVs.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wai-nfs-provisioner
  labels:
    app: wai-nfs-provisioner
  namespace: nfs
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: wai-nfs-provisioner
  template:
    metadata:
      labels:
        app: wai-nfs-provisioner
    spec:
      # Uses the same service-account as the server-provisioner above. So even
      # if you don't deploy that, the RBAC configs are still necessary.
      serviceAccount: nfs-provisioner
      containers:
        - name: nfs
          image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2
          volumeMounts:
            - name: nfs-root
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME
              value: wai.org/nfs
            - name: NFS_SERVER
              # Replace this with the IP/DNS of your existing NFS server.
              value: 10.96.117.101
              # This neesd to be a dir/sub-dir exposed by the NFS server of this
              # deployment will fail with access denied.
            - name: NFS_PATH
              value: /
      volumes:
        - name: nfs-root
          nfs:
            # Replace this with the IP/DNS of your existing NFS server.
            server: 10.96.117.101
            path: /
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: wai-nfs
# or choose another name, must match deployment's env PROVISIONER_NAME'.
provisioner: wai.org/nfs
parameters:
  archiveOnDelete: "false"

