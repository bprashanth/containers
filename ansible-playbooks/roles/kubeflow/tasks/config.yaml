- name: Update container runtime to PNS
  shell: "kubectl get configmap workflow-controller-configmap --namespace kubeflow -o yaml | sed 's/docker/pns/g' | kubectl apply -f -"
  tags: [config, apply]

# TODO: make these templates and take the username as an arg.
- name: Copy over the cofig yamls
  copy:
    src: files
    dest: /tmp/
  tags: [config, copy]

- name: Deploy cluster wide configs and services
  shell: "kubectl apply -f {{ item }}"
  loop: ["/tmp/files/cluster/kubeflow", "/tmp/files/cluster/nfs/server.yaml", "/tmp/files/cluster/nfs/provisioner.yaml"]
  tags: [config, apply]

# TODO: this is a major hack. We are waiting for the namespaces in the profiles
# above to get created. Make both a parametrized list and poll through ansible's
# "loop". This will not scale as we add profiles!
- name: Wait for upto 60s for namespace creation
  shell: "kubectl get ns admin"
  register: ns
  until: ns.stdout.find("admin") != -1
  retries: 10
  delay: 10
  tags: [config, apply]

- name: Deploy per namespace configs and services
  shell: "kubectl apply -f /tmp/files/ns"
  tags: [config, apply]

  # Restart workflow-controller for PNS, ml-pipeline for the userid-proxy and
  # jupyter-web-app for poddefaults.
- name: Reload Services
  shell: "kubectl delete po -l {{ item }} -n kubeflow --force"
  tags: [config, restart]
  loop: ["app=workflow-controller", "app=ml-pipeline", "app=jupyter-web-app"]

# TODO: Expose a real loadbalancer that can proxy to any service in the cluster.
- name: Expose loadbalancer on host port 80
  shell: "kubectl get deployments -n istio-system istio-ingressgateway -o json | sed 's/\"containerPort\": 80,/\"containerPort\": 80, \"hostPort\": 80,/g' | kubectl apply -f -"
  tags: [config, apply]

